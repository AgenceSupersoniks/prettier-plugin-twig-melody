// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrayExpression.melody.twig 1`] = `
{{ [2, 3, "cat"] }}

{{ [ 2, 3, "cat","dog",   "mouse"] }}

{{ [ 2, 3, "cat","dog", "mouse", "cake", "elephant", "zebra", 3.1415, translate('translation_key')] }}

{{ numbers[:1] }}

{{ numbers[1:4] }}

{{ numbers[1:endIndex] }}

{{ numbers[1:] }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{{ [2, 3, "cat"] }}

{{ [2, 3, "cat", "dog", "mouse"] }}

{{
    [
        2,
        3,
        "cat",
        "dog",
        "mouse",
        "cake",
        "elephant",
        "zebra",
        3.1415,
        translate("translation_key")
    ]
}}

{{ numbers[:1] }}

{{ numbers[1:4] }}

{{ numbers[1:endIndex] }}

{{ numbers[1:] }}
`;

exports[`callExpression.melody.twig 1`] = `
{{ range(3) }}

{{ date('d/m/Y H:i', timezone="Europe/Paris") }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{{ range(3) }}{{ date("d/m/Y H:i", timezone = "Europe/Paris") }}
`;

exports[`conditionalExpression.melody.twig 1`] = `
{{ test ? "One" : "Two" }}

{{ test ? "This is a slightly longer string to overflow the line" : "and here is its counterpart" }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{{ test ? "One" : "Two" }}

{{
    test
        ? "This is a slightly longer string to overflow the line"
        : "and here is its counterpart"
}}
`;

exports[`filterExpression.melody.twig 1`] = `
{{ 'test.foo' | split('.') }}
{{ range(3) | sort | join(',') }}
{{ 'SHOUTING' | lower|escape('html') | upper | escape('markdown') | lower | upper | escape('markdown') }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{{ "test.foo" | split(".") }}
{{ range(3) | sort | join(",") }}
{{
    "SHOUTING"
        | lower
        | escape("html")
        | upper
        | escape("markdown")
        | lower
        | upper
        | escape("markdown")
}}
`;

exports[`operators.melody.twig 1`] = `
{{ a b-and b }}
{{ a b-or b }}
{{ a b-xor b }}
{{ a or b }}
{{ a and b }}
{{ a == b }}
{{ a != b }}
{{ a < b }}
{{ a > b }}
{{ a >= b }}
{{ a <= b }}
{{ a in b }}
{{ a not in b }}
{{ a matches b }}
{{ a matches '^foo' }}
{{ a starts with b }}
{{ a ends with b }}
{{ a..b }}
{{ a+b }}
{{ a-b }}
{{ a~b }}
{{ a*b }}
{{ a/b }}
{{ a%b }}
{{ a ** b }}
{{ a ? b }}
{{ a ?: b }}
{{ a ?? b }}

{{ a is divisible by(b) }}
{{ a is not divisible by(b) }}
{{ a is defined }}
{{ a is not defined }}
{{ isEmpty is empty }}
{{ a is not empty }}
{{ a is even }}
{{ a is not even }}
{{ a is iterable }}
{{ a is not iterable }}
{{ a is null }}
{{ a is not null }}
{{ a is odd }}
{{ a is not odd }}
{{ a is same as(b) }}
{{ a is not same as(b) }}
{{ a is not same as(banana, apple, orange, lemonade, kiwi, coconut, pineapple, pomegrenade) }}

{{ dump(test) }}
{{ range(2, 3) | sort | join(',') }}
{{ range(3) | sort | join(',') }}
{{ range(2, 3, 2) | sort | join(',') }}
{{ test | raw }}
{{ 2.4 | abs }}
{{ { a: 'b' } | json_encode | trim }}
{{ [2, 3] | length }}
{{ 'test.foo' | split('.') }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{{ a b-and b }}
{{ a b-or b }}
{{ a b-xor b }}
{{ a or b }}
{{ a and b }}
{{ a == b }}
{{ a != b }}
{{ a < b }}
{{ a > b }}
{{ a >= b }}
{{ a <= b }}
{{ a in b }}
{{ a not in b }}
{{ a matches b }}
{{ a matches "^foo" }}
{{ a starts with b }}
{{ a ends with b }}
{{ a .. b }}
{{ a + b }}
{{ a - b }}
{{ a ~ b }}
{{ a * b }}
{{ a / b }}
{{ a % b }}
{{ a ** b }}
{{ a ? b }}
{{ a ? : b }}
{{ a ?? b }}

{{ a is divisible by(b) }}
{{ a is not divisible by(b) }}
{{ a is defined }}
{{ a is not defined }}
{{ isEmpty is empty }}
{{ a is not empty }}
{{ a is even }}
{{ a is not even }}
{{ a is iterable }}
{{ a is not iterable }}
{{ a is null }}
{{ a is not null }}
{{ a is odd }}
{{ a is not odd }}
{{ a is same as(b) }}
{{ a is not same as(b) }}
{{
    a is not same as(
        banana,
        apple,
        orange,
        lemonade,
        kiwi,
        coconut,
        pineapple,
        pomegrenade
    )
}}

{{ dump(test) }}
{{ range(2, 3) | sort | join(",") }}
{{ range(3) | sort | join(",") }}
{{ range(2, 3, 2) | sort | join(",") }}
{{ test | raw }}
{{ 2.4 | abs }}
{{ { "a": "b" } | json_encode | trim }}
{{ [2, 3] | length }}
{{ "test.foo" | split(".") }}
`;

exports[`stringConcat.melody.twig 1`] = `
<div>
{{ first  ~   second    }}
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div>{{ first ~ second }}</div>
`;
